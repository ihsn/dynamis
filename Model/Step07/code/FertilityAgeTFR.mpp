//LABEL (FertilityAgeTFR, EN) Base Fertility

/* NOTE(FertilityAgeTFR, EN)
This module implements fertility based on age-specific fertility rates calculated from two parameters: an age distribution of fertility and a projected total fertility rate (TFR) for future years. Another parameter is the sex-ratio. This module is a microsimulation implementation of a typical cohort component model. 

The actual age-specific period fertility rates are calculated in the PreSimulation function to meet the projected TFR for each year. 

The model is prepared for being complemented or over-ridden by an alternative refined fertility model. This is done by three logical states:

- The state use_base_fertility_model is initialized as TRUE; it indicates that the base model is to be used. When adding another model choice this flag can be changed in another module.    
- The state use_base_fertility_for_alignment is initialized with FALSE; it indicates if another model is to be aligned to the fertility outcome of this base model. 
- The state baby_looking_for_mother is set to TRUE at a birth event if the base model is used for alignment only and the actual birth has to be assigned to another person of the population.   
*/

////////////////////////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////////////////////////

range FERTILE_AGE_RANGE { 10, 49 };				    //EN Fertile age range
range PARITY_RANGE { 0, 15 };					    //EN Parity range

////////////////////////////////////////////////////////////////////////////////////////////////////
// Parameters
////////////////////////////////////////////////////////////////////////////////////////////////////

parameters
{
    //EN Age distribution of fertility
    double  AgeSpecificFertility[FERTILE_AGE_RANGE][SIM_YEAR_RANGE];    

    //EN Total fertility rate
    double  TotalFertilityRate[SIM_YEAR_RANGE];     

    //EN Sex ratio (male per 100 female)
    double  SexRatio[SIM_YEAR_RANGE];                                   

    //EN Age specific fertility rate
    model_generated	double	AgeSpecificFertilityRate[FERTILE_AGE_RANGE][SIM_YEAR_RANGE];	
};

parameter_group PG03a_Fertility_Model_A  //EN Fertility Base Model 
{
    AgeSpecificFertility, TotalFertilityRate, SexRatio
};


////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor declarations
////////////////////////////////////////////////////////////////////////////////////////////////////

actor Person
{
    logical use_base_fertility_model = { TRUE };            //EN Use the base model
    logical use_base_fertility_for_alignment = { FALSE };   //EN Use the model for alignment
    logical baby_looking_for_mother = { FALSE };            //EN A birth is still to be created

    //EN Indicator that perion is a potential mother
    logical is_potential_mother = (sex == FEMALE && WITHIN(FERTILE_AGE_RANGE, integer_age)
    && parity < MAX(PARITY_RANGE) && in_projected_time) ? TRUE : FALSE;

    PARITY_RANGE parity;                                    //EN Parity
    event	timeBirthEvent, BirthEvent;                     //EN Birth event
};


////////////////////////////////////////////////////////////////////////////////////////////////////
// Event Implementations
////////////////////////////////////////////////////////////////////////////////////////////////////

TIME Person::timeBirthEvent()
{
    double dEventTime = TIME_INFINITE;
    double dHazard = 0.0;

    if (is_potential_mother && (use_base_fertility_model || use_base_fertility_for_alignment))
    {
        dHazard = AgeSpecificFertilityRate[RANGE_POS(FERTILE_AGE_RANGE, integer_age)]
                [RANGE_POS(SIM_YEAR_RANGE, calendar_year)];
        if (dHazard > 0.0) dEventTime = WAIT(-TIME(log(RandUniform(3)) / dHazard));
    }
    return dEventTime;
}

void Person::BirthEvent()
{
    // event applies to individual without alignment
    if (use_base_fertility_model)
    {
        parity++;                   // increment parity
        auto peChild = new Person;  // Create and point to a new actor
        peChild->Start(NULL, this);   // Call Start() function of baby and pass own address 
    }
    else if (use_base_fertility_for_alignment)
    {
        baby_looking_for_mother = TRUE;
    }
}   

////////////////////////////////////////////////////////////////////////////////////////////////////
// Pre-Simulation
////////////////////////////////////////////////////////////////////////////////////////////////////

void PreSimulation()
{
    double dSum;
    for (int nYear = 0; nYear < SIZE(SIM_YEAR_RANGE); nYear++)
    {
        dSum = 0.0;
        // check if distribution parameter adds up too 1 
        for (int nAge = 0; nAge < SIZE(FERTILE_AGE_RANGE); nAge++)
        {
            dSum = dSum + AgeSpecificFertility[nAge][nYear];
        }
        // scale distribution to 1 and convert to fertility rates; copy to model generated parameter
        for (int nAge = 0; nAge < SIZE(FERTILE_AGE_RANGE); nAge++)
        {
            if (dSum > 0.0)
            {
                AgeSpecificFertilityRate[nAge][nYear]
                    = AgeSpecificFertility[nAge][nYear] / dSum * TotalFertilityRate[nYear];
            }
            else AgeSpecificFertilityRate[nAge][nYear] = 0.0;
        }
    }
}