//LABEL(modgen_time_based, EN) Modgen simulation framework for time-based cross-compatible models

/* NOTE(modgen_time_based, EN)
This module implements core global functions for time-based models. It should not be necessary to modify any code in this module.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////
// Some String Contants used in the User-Interface
////////////////////////////////////////////////////////////////////////////////////////////////////

string S_MODEL_FINISH;              //EN Finish
string S_MODEL_REPLICATE;           //EN Replicate
string S_MODEL_SIMULATION;          //EN Simulation
string S_MODEL_START;               //EN Start

////////////////////////////////////////////////////////////////////////////////////////////////////
// SimulateEvents() simulates all events for all entities in the simulation.
////////////////////////////////////////////////////////////////////////////////////////////////////

void SimulateEvents()
{
    // Buffer for messages
    const size_t nBufSize = 255;
    TCHAR szBuffer[nBufSize];

    // Simulation member ordinal for progress reporting
    int nSimulationMember = GetReplicate();

    _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"), (LPCTSTR)ModelString("S_MODEL_REPLICATE"),
        nSimulationMember, (LPCTSTR)ModelString("S_MODEL_SIMULATION"));
    ProgressMessage( szBuffer );

    double dCurrentTime = TIME_INFINITE;
    double dStartTime = TIME_INFINITE;

    int nLastProgressPercent = -1;
    int nThisProgressPercent = -1;

    while ( !gpoEventQueue->Empty() )
    {

        // get the time of next event, verify against the simulation end
        dCurrentTime = gpoEventQueue->NextEvent();

        // Note the start time (time of first event) for progress indicator
        if ( dStartTime == TIME_INFINITE )
        {
            dStartTime = dCurrentTime;
        }

        if ( dCurrentTime > SIMULATION_END() || gbInterrupted || gbCancelled || gbErrors )
        {
            if (dCurrentTime > SIMULATION_END())
            {
                // age all actors to the simulation end time
                gpoEventQueue->WaitUntilAllActors( SIMULATION_END() );
            }

            _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"),
                (LPCTSTR)ModelString("S_MODEL_REPLICATE"),
                nSimulationMember, (LPCTSTR)ModelString("S_MODEL_FINISH"));
            ProgressMessage( szBuffer );

            gpoEventQueue->FinishAllActors();
        }
        else
        {
            // age all actors to the time of next event
            gpoEventQueue->WaitUntil( dCurrentTime );

            // implement the next event
            gpoEventQueue->Implement();
        }

        // Update progress indicator only if the integer percentage complete changes
        // (updates to the progress bar at every event are expensive).
        nThisProgressPercent = (int)( 100 * ( dCurrentTime - dStartTime ) /
                                            ( SIMULATION_END() - dStartTime ) );

        if ( nThisProgressPercent > nLastProgressPercent )
        {
            TimeReport( dCurrentTime );    // update simulation progress
            nLastProgressPercent = nThisProgressPercent;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// LogSimulationStart() writes a start message for the simulation member in the log.
////////////////////////////////////////////////////////////////////////////////////////////////////

void LogSimulationStart()
{
    // Buffer for messages
    const size_t nBufSize = 255;
    TCHAR szBuffer[nBufSize];

    // Simulation member ordinal for progress reporting
    int nSimulationMember = GetReplicate();

    _stprintf_s(szBuffer, nBufSize, _T("%s %d: %s"), (LPCTSTR)ModelString("S_MODEL_REPLICATE"),
        nSimulationMember, (LPCTSTR)ModelString("S_MODEL_START"));
    ProgressMessage( szBuffer );
}
